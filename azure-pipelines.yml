# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master
- develop

name: $(Date:yyyyMMdd)$(Rev:.r)

jobs:

- job: 'Test_Linux'
  pool:
    vmImage: 'Ubuntu-16.04'
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 2

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip
      pip install '.[test]' pytest-azurepipelines
    displayName: 'Install dependencies'
  - script: |
      python -m pytest --junitxml=../reports/flask-basic.xml test/
    displayName: 'Run tests'
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: 'reports/personal-bookshelf.xml'
      testRunTitle: '$(Agent.OS) - $(Build.BuildNumber)[$(Agent.JobName)] - Python $(python.version)'
    condition: succeededOrFailed()

- job: 'Test_Windows'
  pool:
    vmImage: 'vs2017-win2016'
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 2

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip
      pip install .[test] pytest-azurepipelines
    displayName: 'Install dependencies'
  - script: |
      python -m pytest test/
    displayName: 'pytest'
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: 'reports/personal-bookshelf.xml'
      testRunTitle: '$(Agent.OS) - $(Build.BuildNumber)[$(Agent.JobName)] - Python $(python.version)'
    condition: succeededOrFailed()

- job: 'Semantic_Release'
  dependsOn:
  - 'Test_Linux'
  - 'Test_Windows'
  condition: succeeded()

  steps:
    - script: >
        npx -p semantic-release
        -p @semantic-release/changelog
        -p semantic-release-ado
        semantic-release
      env: { GH_TOKEN: $(GITHUB_TOKEN) }
      displayName: 'Semantic Release'
